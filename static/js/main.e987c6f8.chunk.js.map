{"version":3,"sources":["firebaseConfig.js","comps/ChatMessage.js","comps/NewMessageForm.js","comps/ChatRoom.js","comps/LoginForm.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","ChatMessage","message","username","className","style","textAlign","sender","text","NewMessageForm","sendMessage","updateMessage","onSubmit","type","onChange","ChatRoom","messagesRef","query","orderBy","useCollectionData","idField","messages","length","doc","id","delete","map","msg","LoginForm","setUsername","usersRef","useState","enteredUsername","setEnteredUsername","isUsernameTaken","setIsUsernameTaken","users","checkIfUsernameIsTaken","name","includes","e","preventDefault","target","value","visibility","App","formValue","setFormValue","collection","a","add","createdAt","FieldValue","serverTimestamp","reset","useEffect","addUsernameToDatabase","justifyContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e987c6f8.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport 'firebase/firestore';\r\n\r\nfirebase.initializeApp({\r\n    apiKey: \"AIzaSyDUs5a4BikKnPy9W2C_Zxhe5jSb8icwez0\",\r\n    authDomain: \"multi-language-chat-app-f8696.firebaseapp.com\",\r\n    projectId: \"multi-language-chat-app-f8696\",\r\n    storageBucket: \"multi-language-chat-app-f8696.appspot.com\",\r\n    messagingSenderId: \"607018711041\",\r\n    appId: \"1:607018711041:web:2050e05e3355c884eaa800\"\r\n})\r\n\r\nconst firestore = firebase.firestore();\r\n\r\nexport {firestore};","import React from 'react'\r\n\r\nfunction ChatMessage({message, username}) {\r\n    return (\r\n        <div className=\"message-container\">\r\n            <p className=\"message-sender\" style={{textAlign: message.sender === username ? \"right\" : \"left\"}}>{message.sender}</p>\r\n            <p className=\"message\" style={{textAlign: message.sender === username ? \"right\" : \"left\"}}>{message.text}</p> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatMessage;\r\n","import React from 'react'\r\n\r\nfunction NewMessageForm({sendMessage, updateMessage}) {\r\n    return (\r\n        <form className=\"new-message-form\" onSubmit={sendMessage}>\r\n            <input className=\"new-message-input\" type=\"text\" onChange={updateMessage}/>\r\n            <button className=\"send-message-button\">Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewMessageForm;\r\n","import React from 'react';\r\nimport ChatMessage from './ChatMessage';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\nimport NewMessageForm from './NewMessageForm';\r\n\r\nfunction ChatRoom({messagesRef, sendMessage, updateMessage, username}) {\r\n    const maxMessages = 50; \r\n    \r\n    const query = messagesRef.orderBy('createdAt');\r\n\r\n    const [messages] = useCollectionData(query, {idField: 'id'});\r\n\r\n    if (messages && messages.length > maxMessages)\r\n    {\r\n        messagesRef.doc(messages[0].id).delete();\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat-room\">\r\n            <div className=\"messages\">\r\n                {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} username={username}/>)}\r\n            </div>\r\n\r\n            <NewMessageForm sendMessage={sendMessage} updateMessage={updateMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatRoom;\r\n","import React, {useState} from 'react';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\n\r\nfunction LoginForm({setUsername, usersRef}) {\r\n    const [enteredUsername, setEnteredUsername] = useState('');\r\n\r\n    const [isUsernameTaken, setIsUsernameTaken] = useState(false);\r\n\r\n    const query = usersRef.orderBy('createdAt');   \r\n    const [users] = useCollectionData(query, {idField: 'id'});\r\n\r\n    const login = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (!checkIfUsernameIsTaken(enteredUsername))\r\n        {\r\n            setUsername(enteredUsername);\r\n\r\n            setIsUsernameTaken(false);\r\n        }\r\n        else\r\n        {\r\n            setIsUsernameTaken(true);\r\n        }\r\n    }\r\n\r\n    const updateUsername = (e) => {\r\n        setEnteredUsername(e.target.value);\r\n    }\r\n\r\n    const checkIfUsernameIsTaken = (username) => {\r\n        let usernames = [];\r\n        usernames = users.map(users => users.name);\r\n\r\n        return usernames.includes(username);\r\n    }\r\n    \r\n    return (\r\n        <form className=\"login-form\" onSubmit={login}>\r\n            <p className=\"username\">Username:</p>\r\n            <input type=\"text\" onChange={updateUsername}/>\r\n            <button>Sign in</button>\r\n\r\n            <p className=\"taken-username\" style={{visibility: isUsernameTaken ? \"visible\" : \"hidden\"}}>That username is taken!</p>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm;\r\n","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport firebase from 'firebase';\r\nimport {firestore} from './firebaseConfig';\r\nimport ChatRoom from './comps/ChatRoom';\r\nimport LoginForm from './comps/LoginForm';\r\n\r\nfunction App() {\r\n    const [username, setUsername] = useState('');\r\n\r\n    const [formValue, setFormValue] = useState('');\r\n    \r\n    const messagesRef = firestore.collection('messages');\r\n    const usersRef = firestore.collection('users');\r\n\r\n    const updateMessage = (e) => {\r\n        setFormValue(e.target.value);\r\n    }\r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (formValue === '')\r\n        {\r\n            return;\r\n        }\r\n\r\n        await messagesRef.add({\r\n            text: formValue,\r\n            sender: username,\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp()            \r\n        });\r\n\r\n        setFormValue('');\r\n\r\n        e.target.reset();\r\n    }\r\n\r\n    useEffect(() => { // Everytime the username updates and isn't empty\r\n        username != \"\" && addUsernameToDatabase();\r\n    }, [username]);\r\n\r\n    const addUsernameToDatabase = async () => {\r\n        await usersRef.add({\r\n            name: username,\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp()   \r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\" style={{justifyContent: username ? \"space-between\" : \"center\"}}>\r\n            {username ? <ChatRoom messagesRef={messagesRef} sendMessage={sendMessage} updateMessage={updateMessage} username={username}/> : <LoginForm setUsername={setUsername} usersRef={usersRef}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}